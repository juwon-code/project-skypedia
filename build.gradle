plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.5'
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.prgrmsfinal'
version = '0.0.1'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    /*
    * Base Dependency List
    * - Spring Boot Starter Web          :: Spring MVC 애플리케이션 개발의 기본 설정을 제공하는 라이브러리.
    * - Spring Boot Starter Websocket    :: WebSocket 기반 실시간 통신 기능을 지원하는 라이브러리.
    * - Spring Boot Starter Actuator     :: 서비스의 헬스 모니터링 기능을 제공하는 라이브러리.
    * - Spring Boot Starter Devtools     :: 개발 편의성 기능들을 제공하는 라이브러리.
    * - Project Lombok                   :: 보일러플레이트 코드를 줄여주는 애너테이션 기반 라이브러리.
    * - Apache Commons Lang3             :: Java의 기본 기능을 확장하는 유틸리티 라이브러리.
    * */
    implementation 'org.springframework.boot:spring-boot-starter-web:3.3.5'
    implementation 'org.springframework.boot:spring-boot-starter-websocket:3.3.5'
    implementation 'org.springframework.boot:spring-boot-starter-actuator:3.3.5'
    developmentOnly 'org.springframework.boot:spring-boot-devtools:3.3.5'
    compileOnly 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.projectlombok:lombok:1.18.38'
    implementation 'org.apache.commons:commons-lang3:3.12.0'

    /*
    * Security Dependency List
    * - Spring Boot Starter Security      :: Spring Security 기반 인증 및 권한 기능을 제공하는 라이브러리.
    * - Spring Boot Starter OAuth2 Client :: OAuth2 인증을 위한 클라이언트 기능을 제공하는 라이브러리.
    * - Spring Boot Starter Validation    :: Bean 데이터 검증을 지원하는 라이브러리.
    * - JJWT API                          :: JWT를 생성하고 검증하는 기능을 제공하는 라이브러리.
    * - JJWT Impl                         :: JJWT API 내부 구현을 담당하는 라이브러리.
    * - JJWT Jackson                      :: JWT 데이터 직렬화 및 역직렬화에 Jackson을 활용하는 라이브러리.
    * */
    implementation 'org.springframework.boot:spring-boot-starter-security:3.3.5'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client:3.3.5'
    implementation 'org.springframework.boot:spring-boot-starter-validation:3.3.5'
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'

    /*
    * API Dependency List
    * - Spring Boot Starter Elasticsearch :: Elasticsearch와 연결 및 데이터 관리를 지원하는 라이브러리.
    * - Springdoc OpenAPI Starter WebMvc  :: OpenAPI 문서를 자동으로 생성하는 라이브러리.
    * - Spring Cloud GCP Starter          :: GCP 서비스의 연동 기본 설정을 제공하는 라이브러리.
    * - Spring Cloud GCP Storage          :: GCS와 파일 입출력을 간편하게 지원하는 라이브러리.
    * */
    implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch:3.3.5'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'
    implementation 'org.springframework.cloud:spring-cloud-gcp-starter:1.2.8.RELEASE'
    implementation 'org.springframework.cloud:spring-cloud-gcp-storage:1.2.8.RELEASE'

    /*
    * DB Dependency List
    * - Spring Boot Starter Data JPA :: JPA를 활용하여 데이터베이스 연동을 간편하게 처리하는 라이브러리.
    * - PostgreSQL JDBC Driver       :: Java 환경에서 PostgreSQL 데이터베이스 연결을 지원하는 라이브러리.
    * - Spring Boot Starter Redis    :: Redis를 관리 및 연결하는데 사용되는 라이브러리.
    * - Hibernate Spatial            :: 공간 데이터를 다룰 수 있도록 Hibernate의 기능을 확장하는 라이브러리.
    * - JTS Core                     :: 공간 데이터 및 지리 정보 시스템 관련 기능을 제공하는 라이브러리.
    * - Flyway Core                  :: 데이터베이스 마이그레이션에 버전 관리 및 자동화 기능을 제공하는 라이브러리.
    * - Flyway Database PostgreSQL   :: Flyway가 PostgreSQL 데이터베이스를 지원하도록 하는 확장 라이브러리.
    * - QueryDSL JPA                 :: JPA 엔티티를 대상으로 타입 세이프 쿼리 작성을 지원하는 라이브러리.
    * - QueryDSL APT                 :: QueryDSL 동작에 필요한 Q도메인 클래스를 생성하는 라이브러리.
    * */
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.3.5'
    runtimeOnly 'org.postgresql:postgresql:42.7.7'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis:3.3.5'
    implementation 'org.hibernate:hibernate-spatial:6.2.0.Final'
    implementation 'org.locationtech.jts:jts-core:1.18.0'
    implementation 'org.flywaydb:flyway-core:11.9.1'
    runtimeOnly 'org.flywaydb:flyway-database-postgresql:11.9.1'
    implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.1.0:jakarta'
    annotationProcessor'jakarta.persistence:jakarta.persistence-api'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'


    /*
    * Jackson Dependency List
    * - Jackson Core                   :: Jackson의 기본적인 핵심 라이브러리.
    * - Jackson Databind               :: JSON 직렬화 및 역직렬화에 사용되는 라이브러리.
    * - Jackson Datatype JSR310        :: Java 8의 날짜 및 시간 타입 지원에 사용하는 라이브러리.
    * - Jackson Module Parameter Names :: 생성자 기반 JSON 객체 매핑 지원 라이브러리.
    * */
    implementation 'com.fasterxml.jackson.core:jackson-core:2.18.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.18.2'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.18.2'
    implementation 'com.fasterxml.jackson.module:jackson-module-parameter-names:2.18.2'

    /*
    * Test Dependency List
    * - Spring Boot Starter Test               :: Spring Boot 테스트를 위한 모듈을 포함하는 라이브러리.
    * - Spring Security Test                   :: Spring Security 기반 테스트를 지원하는 라이브러리.
    * - Testcontainers JUnit Jupiter Extension :: JUnit 테스트를 위한 격리 컨테이너 지원 라이브러리.
    * - Testcontainers JDBC PostgreSQL         :: PostgreSQL 테스트를 위한 격리 컨테이너 지원 라이브러리.
    * - Testcontainers Elasticsearch           :: Elasticsearch 테스트를 위한 격리 컨테이너 지원 라이브러리.
    * - Junit Platform Launcher                :: JUnit5 테스트 실행 런처 역할을 하는 라이브러리.
    * */
    testImplementation 'org.springframework.boot:spring-boot-starter-test:3.3.5'
    testImplementation 'org.springframework.security:spring-security-test:6.2.4'
    testImplementation 'org.testcontainers:junit-jupiter:1.21.3'
    testImplementation 'org.testcontainers:postgresql:1.21.3'
    testImplementation 'org.testcontainers:elasticsearch:1.21.3'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

def querydslDir = "$buildDir/generated/querydsl"

sourceSets {
    main.java.srcDirs += querydslDir
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
}

clean {
    delete file(querydslDir)
}