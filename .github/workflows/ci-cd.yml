# 릴리스 브랜치에서 CI 및 CD를 수행하는 워크플로 입니다.
# release 브랜치에 Push 및 PR에서 자동으로 실행되며, 필요할 경우 수동으로 실행할 수 있습니다.

name: CI-CD

on:
  pull_request:
    branches: [ "release" ]
  workflow_dispatch:

env:
  DOCKER_IMAGE_PATH: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.APPLICATION_NAME }}:latest

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 레포지토리 체크아웃
      - name: Checkout Repository
        uses: actions/checkout@v4.2.2

      # 배포용 환경변수파일 생성
      - name: Create properties from secrets
        run: | 
          echo "${{ secrets.PRODUCE_ENV }}" | base64 --decode > .env

      # JDK 17 설치
      - name: Setup Java Development Kit 17
        uses: actions/setup-java@v4.6.0
        with:
          java-version: '17'
          distribution: 'temurin'

      # 빌드 실행 권한 취득
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 프로젝트 빌드
      - name: Build with gradle
        run: ./gradlew clean build

      # 도커 이미지 빌드
      - name: Build Docker image
        run: docker build -t ${{ env.DOCKER_IMAGE_PATH }}

      # 도커 허브 로그인
      - name: Sign-in to DockerHub
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 도커 이미지 전달하기
      - name: Push Docker image
        run: docker push ${{ env.DOCKER_IMAGE_PATH }}

  deploy:
    needs: build
    runs-on: self-hosted
    steps:
      # SSH 접속 및 배포
      - name: SSH to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.GCP_HOST }}
          username: ${{ secrets.GCP_USERNAME }}
          key: ${{ secrets.GCP_KEY }}
          port: ${{ secrets.GCP_SSH_PORT }}
          script: |
            sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            sudo docker rm -f $(sudo docker ps -qa)
            sudo docker pull ${{ env.DOCKER_IMAGE_PATH }}
            sudo docker-compose up -d
            sudo docker image prune -f

  notification:
    needs: [ build, deploy ]
    runs-on: ubuntu-latest
    steps:
      # 현재 시간 얻기
      - name: Get current time
        uses: josStorer/get-current-time@v2.1.2
        id: current-datetime
        with:
          format: YYYY-MM-DDTHH:mm:ss
          utcOffset: "+09:00"

      # 슬랙 메시지 전송 (성공)
      - name: Send Slack Message on Success
        if: success()
        uses: 8398a7/action-slack@v3.16.2
        with:
          status: success
          text: |
            ✅ *애플리케이션 배포 성공*
            서버에 애플리케이션 배포를 성공적으로 수행했습니다.
            작업 일시: ${{ steps.current-datetime.outputs.formattedTime }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      # 슬랙 메시지 전송 (실패)
      - name: Send Slack Message on Failure
        if: failure()
        uses: 8398a7/action-slack@v3.16.2
        with:
          status: failure
          text: |
            🚨 *애플리케이션 배포 실패*
            서버에 애플리케이션을 배포 작업이 실패했습니다.
            개발자님께서는 원인을 파악하여 적절한 조치를 취해주세요.
            작업 일시: ${{ steps.current-datetime.outputs.formattedTime }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}